{% extends 'base.html.twig' %}

{% block title %}{{ page_title }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/theme/dracula.min.css">
    <style>
        .page-title {
            font-size: 2rem;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 1.5rem;
            border-bottom: 2px solid #3498db;
            padding-bottom: 0.75rem;
        }
        
        .CodeMirror {
            height: 450px;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', 'Consolas', monospace;
            font-size: 14px;
            border: 1px solid #ced4da;
            border-radius: 0.5rem;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .json-error {
            color: #dc3545;
            margin-top: 0.75rem;
            padding: 0.75rem;
            background-color: rgba(220, 53, 69, 0.1);
            border-radius: 0.5rem;
            display: none;
        }
        
        .json-valid {
            color: #28a745;
            margin-top: 0.75rem;
            padding: 0.75rem;
            background-color: rgba(40, 167, 69, 0.1);
            border-radius: 0.5rem;
            display: none;
        }
        
        .import-help {
            margin-bottom: 1.5rem;
            padding: 1.25rem;
            background-color: #f8f9fa;
            border-radius: 0.5rem;
            border-left: 4px solid #3498db;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }
        
        .import-help h5 {
            color: #3498db;
            font-weight: 600;
            margin-bottom: 0.75rem;
        }
        
        .form-group label {
            font-weight: 600;
            color: #495057;
            margin-bottom: 0.5rem;
        }
        
        .card {
            border: none;
            border-radius: 0.5rem;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
        }
        
        .btn-primary {
            background-color: #3498db;
            border-color: #3498db;
            padding: 0.5rem 1.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .btn-primary:hover {
            background-color: #2980b9;
            border-color: #2980b9;
        }
        
        .btn-secondary {
            background-color: #95a5a6;
            border-color: #95a5a6;
            padding: 0.5rem 1.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .btn-secondary:hover {
            background-color: #7f8c8d;
            border-color: #7f8c8d;
        }
        
        .status-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }
        
        .status-error {
            background-color: #dc3545;
        }
        
        .status-valid {
            background-color: #28a745;
        }
        
        .form-actions {
            display: flex;
            gap: 1rem;
            margin-top: 1.5rem;
        }
        
        .json-structure {
            margin-top: 1rem;
            background-color: rgba(52, 152, 219, 0.1);
            border-radius: 0.5rem;
            padding: 1rem;
        }
        
        .json-structure h6 {
            color: #3498db;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }
        
        .json-structure pre {
            margin: 0;
            font-size: 0.85rem;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="container mt-5">
        <div class="card">
            <div class="card-body p-4">
                <h1 class="page-title">{{ page_title }}</h1>
                
                <div class="import-help">
                    <h5><i class="fa fa-info-circle"></i> Instructions</h5>
                    <p class="mb-1">Collez votre JSON de quiz dans l'éditeur ci-dessous. Le format doit être conforme à la structure attendue.</p>
                    <p class="mb-1">L'éditeur validera automatiquement la syntaxe JSON avant soumission.</p>
                    
                    <div class="json-structure">
                        <h6>Structure requise :</h6>
                        <pre><code>
{
  "title": "Titre du quiz",                  <span class="text-muted">// Obligatoire</span>
  "timePerQuestion": 30,                     <span class="text-muted">// Temps en secondes par question (défaut: 30)</span>
  "passingScore": 70,                        <span class="text-muted">// Score de réussite en pourcentage (défaut: 70)</span>
  "modeRandom": false,                       <span class="text-muted">// Mode aléatoire des questions (défaut: false)</span>
  "level": 1,                                <span class="text-muted">// ID du niveau (optionnel)</span>
  "categoryQuestions": [1, 2],               <span class="text-muted">// IDs des catégories (optionnel)</span>
  "questions": [                             <span class="text-muted">// Obligatoire, au moins une question</span>
    {
      "question": "Texte de la question",    <span class="text-muted">// Obligatoire</span>
      "options": ["Option 1", "Option 2"],   <span class="text-muted">// Obligatoire, au moins 2 options</span>
      "correctAnswer": 0                     <span class="text-muted">// Index de la bonne réponse (0 = première option)</span>
      "explanation": "Explication de la question" <span class="text-muted">// Explication de la question (optionnel)</span>
    }
  ]
}
                        </code></pre>
                    </div>
                </div>
                
                {{ form_start(form, {'attr': {'class': 'needs-validation', 'id': 'import-form'}}) }}
                    <div class="form-group mb-4">
                        <label for="json-editor">{{ form_label(form.json) }}</label>
                        <div id="json-editor" class="mb-2"></div>
                        
                        <div class="json-error" id="json-error">
                            <span class="status-indicator status-error"></span>
                            <span id="error-message">JSON invalide. Veuillez corriger la syntaxe avant de soumettre.</span>
                        </div>
                        
                        <div class="json-valid" id="json-valid">
                            <span class="status-indicator status-valid"></span>
                            JSON valide - Prêt à être importé
                        </div>
                        
                        {{ form_widget(form.json, {'attr': {'class': 'd-none', 'id': 'json-hidden-input'}}) }}
                    </div>
                    
                    <div class="form-actions">
                        <button type="submit" class="btn btn-primary" id="submit-button" disabled>
                            <i class="fa fa-save me-2"></i> Importer
                        </button>
                        <a href="/admin?crudAction=index&crudControllerFqcn=App%5CController%5CAdmin%5CQuizCrudController" class="btn btn-secondary">
                            <i class="fa fa-arrow-left me-2"></i> Retour
                        </a>
                    </div>
                {{ form_end(form) }}
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/javascript/javascript.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/edit/matchbrackets.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/edit/closebrackets.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/selection/active-line.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Format JSON exemple pour un affichage plus clair
            const defaultJSON = `{
  "title": "Mon Quiz",
  "timePerQuestion": 30,
  "passingScore": 70,
  "modeRandom": false,
  "level": 1,
  "categoryQuestions": [1, 2],
  "questions": [
    {
      "question": "Exemple de question",
      "options": ["Option 1", "Option 2"],
      "correctAnswer": 0
    }
  ]
}`;
            
            // Récupération de la valeur initiale du champ JSON
            const hiddenInput = document.getElementById('json-hidden-input');
            let initialValue = defaultJSON;
            
            // Seulement essayer d'accéder à la valeur si l'élément existe
            if (hiddenInput && hiddenInput.value && hiddenInput.value.trim() !== '') {
                initialValue = hiddenInput.value;
            }
            
            // Initialisation de l'éditeur CodeMirror
            const editor = CodeMirror(document.getElementById('json-editor'), {
                value: initialValue,
                mode: {name: "javascript", json: true},
                theme: "dracula",
                lineNumbers: true,
                matchBrackets: true,
                autoCloseBrackets: true,
                indentUnit: 2,
                tabSize: 2,
                lineWrapping: false,
                styleActiveLine: true,
                viewportMargin: Infinity,
                gutters: ["CodeMirror-linenumbers"],
                extraKeys: {
                    "Tab": function(cm) {
                        if (cm.somethingSelected()) {
                            cm.indentSelection("add");
                        } else {
                            cm.replaceSelection("  ", "end");
                        }
                    }
                }
            });
            
            // Élements du DOM
            const jsonError = document.getElementById('json-error');
            const jsonValid = document.getElementById('json-valid');
            const errorMessage = document.getElementById('error-message');
            const submitButton = document.getElementById('submit-button');
            const importForm = document.getElementById('import-form');
            
            // Fonction pour formater automatiquement le JSON
            function formatJSON() {
                try {
                    const jsonContent = editor.getValue();
                    if (!jsonContent.trim()) return;
                    
                    const parsed = JSON.parse(jsonContent);
                    const formatted = JSON.stringify(parsed, null, 2);
                    editor.setValue(formatted);
                } catch (e) {
                    // Si le JSON n'est pas valide, on ne fait rien
                }
            }
            
            // Fonction de validation JSON
            function validateJSON() {
                const jsonContent = editor.getValue();
                try {
                    if (!jsonContent.trim()) {
                        throw new Error('Le JSON ne peut pas être vide');
                    }
                    
                    const parsed = JSON.parse(jsonContent);
                    
                    // Validation de la structure du quiz
                    if (!parsed.title) {
                        throw new Error('Le quiz doit avoir un titre (propriété "title")');
                    }
                    
                    // Vérification des valeurs numériques
                    if (parsed.timePerQuestion !== undefined && (typeof parsed.timePerQuestion !== 'number' || parsed.timePerQuestion <= 0)) {
                        throw new Error('Le temps par question (timePerQuestion) doit être un nombre positif');
                    }
                    
                    if (parsed.passingScore !== undefined && (typeof parsed.passingScore !== 'number' || parsed.passingScore < 0 || parsed.passingScore > 100)) {
                        throw new Error('Le score de réussite (passingScore) doit être un nombre entre 0 et 100');
                    }
                    
                    // Vérification du mode aléatoire
                    if (parsed.modeRandom !== undefined && typeof parsed.modeRandom !== 'boolean') {
                        throw new Error('Le mode aléatoire (modeRandom) doit être un booléen (true ou false)');
                    }
                    
                    // Vérification du niveau
                    if (parsed.level !== undefined && (typeof parsed.level !== 'string')) {
                        throw new Error('Le niveau (level) doit être un nom de niveau valide');
                    }
                    
                    // Vérification des catégories
                    if (parsed.categoryQuestions !== undefined) {
                        if (!Array.isArray(parsed.categoryQuestions)) {
                            throw new Error('Les catégories (categoryQuestions) doivent être un tableau d\'IDs');
                        }
                        
                        for (let i = 0; i < parsed.categoryQuestions.length; i++) {
                            if (typeof parsed.categoryQuestions[i] !== 'number' || parsed.categoryQuestions[i] <= 0) {
                                throw new Error(`La catégorie à l'index ${i} doit être un ID valide (nombre positif)`);
                            }
                        }
                    }
                    
                    if (!Array.isArray(parsed.questions) || parsed.questions.length === 0) {
                        throw new Error('Le quiz doit contenir un tableau de questions non vide (propriété "questions")');
                    }
                    
                    // Validation de chaque question
                    parsed.questions.forEach((q, index) => {
                        if (!q.question) {
                            throw new Error(`La question ${index + 1} doit avoir un texte (propriété "question")`);
                        }
                        if (!Array.isArray(q.options) || q.options.length < 2) {
                            throw new Error(`La question ${index + 1} doit avoir au moins 2 options (propriété "options")`);
                        }
                        if (typeof q.correctAnswer !== 'number' || q.correctAnswer < 0 || q.correctAnswer >= q.options.length) {
                            throw new Error(`La question ${index + 1} doit avoir une réponse correcte valide (propriété "correctAnswer")`);
                        }
                    });
                    
                    // JSON valide
                    jsonError.style.display = 'none';
                    jsonValid.style.display = 'block';
                    submitButton.disabled = false;
                    return true;
                } catch (e) {
                    // JSON invalide
                    errorMessage.textContent = e.message;
                    jsonError.style.display = 'block';
                    jsonValid.style.display = 'none';
                    submitButton.disabled = true;
                    return false;
                }
            }
            
            // Ajouter un bouton pour formater le JSON
            const formatButton = document.createElement('button');
            formatButton.className = 'btn btn-sm btn-outline-secondary mt-2';
            formatButton.innerHTML = '<i class="fa fa-indent"></i> Formater le JSON';
            formatButton.onclick = function(e) {
                e.preventDefault();
                formatJSON();
                validateJSON();
            };
            document.getElementById('json-editor').parentNode.appendChild(formatButton);
            
            // Valider lors de chaque changement de l'éditeur
            editor.on('change', function() {
                validateJSON();
                // S'assurer que l'élément existe avant de définir sa valeur
                if (hiddenInput) {
                    hiddenInput.value = editor.getValue();
                }
            });
            
            // Valider le formulaire avant soumission
            if (importForm) {
                importForm.addEventListener('submit', function(e) {
                    if (!validateJSON()) {
                        e.preventDefault();
                        return false;
                    }
                    
                    if (hiddenInput) {
                        hiddenInput.value = editor.getValue();
                    }
                    return true;
                });
            }
            
            // Ajuster CodeMirror lors du redimensionnement de la fenêtre
            window.addEventListener('resize', function() {
                editor.refresh();
            });
            
            // Validation initiale
            validateJSON();
            
            // Focus sur l'éditeur
            setTimeout(function() {
                editor.focus();
                editor.refresh();
            }, 100);
        });
    </script>
{% endblock %} 